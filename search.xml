<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>webpack使用raw-loader内联静态资源失效</title>
      <link href="/2020/04/28/webpack%E4%BD%BF%E7%94%A8raw-loader%E5%86%85%E8%81%94%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%A4%B1%E6%95%88/"/>
      <url>/2020/04/28/webpack%E4%BD%BF%E7%94%A8raw-loader%E5%86%85%E8%81%94%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%A4%B1%E6%95%88/</url>
      
        <content type="html"><![CDATA[<p>##1. webpack使用raw-loader内联静态资源失效</p><h4 id="失效代码"><a href="#失效代码" class="headerlink" title="失效代码"></a>失效代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">$&#123; <span class="built_in">require</span>(<span class="string">'raw-loader!babel-loader!./page/demo.js'</span>) &#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="原因及解决办法"><a href="#原因及解决办法" class="headerlink" title="原因及解决办法"></a>原因及解决办法</h4><p>由于html-webpack-plugin解析语法的改变，将<code>${ &quot;code&quot; }</code>写法改为了<code>&lt;%= &quot;code&quot; %&gt;</code><br>将原有的写法改为新写法即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--由于html-webpack-plugin解析语法的改变，将$&#123; "代码" &#125;标识符改为了&lt;%= "代码" %&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">&lt;%=<span class="built_in">require</span>(<span class="string">'raw-loader!babel-loader!./page/demo.js'</span>)%&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>顺便说一下<code>raw-loader@0.5.1</code>，对比了一下raw-loader新版本的源码。发现问题出在导出语法上。<br>新版本的raw-loader，<a href="https://www.npmjs.com/package/raw-loader" target="_blank" rel="noopener">默认情况下，raw-loader生成使用ES模块语法的JS模块</a>。</p><ul><li>老版本 0.5.1 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cacheable &amp;&amp; <span class="keyword">this</span>.cacheable();</span><br><span class="line"><span class="keyword">this</span>.value = content;</span><br><span class="line"><span class="comment">// 0.5.1导出方式</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"module.exports = "</span> + <span class="built_in">JSON</span>.stringify(content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>新版本<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rawLoader</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> options = (<span class="number">0</span>, _loaderUtils.getOptions)(<span class="keyword">this</span>);</span><br><span class="line">  (<span class="number">0</span>, _schemaUtils.default)(_options.default, options, &#123;</span><br><span class="line">    name: <span class="string">'Raw Loader'</span>,</span><br><span class="line">    baseDataPath: <span class="string">'options'</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> json = <span class="built_in">JSON</span>.stringify(source).replace(<span class="regexp">/\u2028/g</span>, <span class="string">'\\u2028'</span>).replace(<span class="regexp">/\u2029/g</span>, <span class="string">'\\u2029'</span>);</span><br><span class="line">  <span class="comment">// 将true 改为false</span></span><br><span class="line">  <span class="keyword">const</span> esModule = <span class="keyword">typeof</span> options.esModule !== <span class="string">'undefined'</span> ? options.esModule : <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">/*const esModule = typeof options.esModule !== 'undefined' ? options.esModule : false;*/</span></span><br><span class="line">  <span class="comment">// esModule 控制导出方式</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;esModule ? <span class="string">'export default'</span> : <span class="string">'module.exports ='</span>&#125;</span> <span class="subst">$&#123;json&#125;</span>;`</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>兼容办法：在node_modules中找到<code>raw-loader/dist/index</code>中将esModule的默认值改为false即可<blockquote><p>如图所示：<br><img src="https://img-blog.csdnimg.cn/20200425133908895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxMTkxNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/2020/04/27/vue/"/>
      <url>/2020/04/27/vue/</url>
      
        <content type="html"><![CDATA[<pre><code>码云：https://gitee.com/yulushen/vue_study</code></pre><h3 id="一、目录结构"><a href="#一、目录结构" class="headerlink" title="一、目录结构"></a>一、目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">scripts                 # 与构建相关的脚本和配置文件</span><br><span class="line">dist                    # 构建后的文件</span><br><span class="line">flow                    # flow的类型声明               </span><br><span class="line">packges                 # vue-server-renderer和vue-template-compiler,它们作为单独的NPM包发布</span><br><span class="line">test                    # 所有的测试代码</span><br><span class="line">src</span><br><span class="line">    compiler            # 与模板编译相关的代码</span><br><span class="line">    core                # 通用的，与平台无关的运行时代码（核心代码）</span><br><span class="line">        observer        # 实现变化侦测的代码</span><br><span class="line">        vdom            # 实现虚拟dom的代码</span><br><span class="line">        instance        # Vue.js实例的构造函数和原型方法</span><br><span class="line">        global-api      # 全局API的代码</span><br><span class="line">        componments     # 通用的抽象组件</span><br><span class="line">    server              # 特定平台代码</span><br><span class="line">    platforms           # 单文件组件（*.vue文件）的解析逻辑</span><br><span class="line">    sfc                 # 整个项目的公共工具代码</span><br><span class="line">    shared              # typescript 类型定义</span><br><span class="line">    types               # typescript 类型定义</span><br><span class="line">        test            # 类型定义测试、</span><br><span class="line">ylsTest                 # 个人仿照源码实现的小demo</span><br><span class="line"></span><br><span class="line">参考：《深入浅出Vue.js》--刘博文</span><br></pre></td></tr></table></figure><h4 id="实例生命周期详解"><a href="#实例生命周期详解" class="headerlink" title="实例生命周期详解"></a>实例生命周期详解</h4><p><img src="/images/Vue.png" alt="Image text"></p><h3 id="二、运行时进行的操作"><a href="#二、运行时进行的操作" class="headerlink" title="二、运行时进行的操作"></a>二、运行时进行的操作</h3><ol><li><p>在生产环境中，在引入Vue的时候，core中实际执行的代码只有index.js中的代码，<br>仅仅是挂载了一部分的全局API方法，以及在Vue.prototype上的方法。创建一个抽象类Vue挂载到全局window对象下。</p></li><li><p>当我们试图实例化一个Vue类的时候，就会调用Vue.constructor方法（instance/index.js），<br>在Vue.constructor方法中，执行了this._init,this._init是挂载在原型上的方法（instance/init）。</p></li><li><p>_init中执行的方法中，先是对传入的options进行处理。最终生成一个Vue实例。就如一个工厂流水线生产出来的产品。<br>传入的是一个空对象，空对象经过observer处理后就有了数据双向绑定的功能，将所有数据变化的视图层重新渲染都集中到_watcher.update方法处理。</p></li><li><p>当所有数据属性都挂载到vm实例上后，就会调用原型上的$mount方法。$mount方法在代码中分了两种形式。<br>一种是带模板编译模块（vue,vue.min中都带有），一种是运行时直接执行（options中有render函数）。<br>带模板编辑的$mount方法，会载入core中的compiler模块，先将模板编译成可执行的render方法，挂载在vm.$options.render属性上。</p></li><li><p>然后调用_watcher属性上的<code>update()</code>方法，调用实例上的<code>vm._update(vm._render(), hydrating)</code>进行初次渲染，将render函数生成的vnode传入，<br>进行dom的操作。在运行时，如果数据产生了变化。重新调用update时，参数<code>render()</code>会重新执行，<br>执行时this为vm对象，通过with(this)的方法，可以将this上的属性都以变量的形式使用。<br>（with是经过模板编译后，先生成一串字符串代码,字符串代码通过new Function(code)转换成可以执行的方法）</p></li><li><p>至此，将生成的模板挂载到实际dom中，实例化完成。在之后每次数据模型进行更新，都会触发_watcher.update方法,<br>重新生成新的vnode，通过diff算法，对比出实际变化的dom，替换掉之后重新渲染到前端代码中。这就形成了类似MVVM的模式</p></li></ol><p><img src="/images/mvvm.png" alt="Image text"></p><h3 id="三、各个模块的概述"><a href="#三、各个模块的概述" class="headerlink" title="三、各个模块的概述"></a>三、各个模块的概述</h3><h4 id="1-observer"><a href="#1-observer" class="headerlink" title="1. observer"></a>1. observer</h4><p>设计的各个类之间的关系图<br><img src="/images/observe.png" alt="Image text"><br><strong>入口： src/core/observer/index.js中的observer方法</strong><br></p><ol><li><p>使用了发布者(Observer)订阅者(Watcher)模式,Dep收集订阅者，并且通过Dep通知订阅者。<br>Observer的原理，vue2.0版本中，利用了js的<code>Object.defineProperty()</code>方法。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大概类似于这种</span></span><br><span class="line"><span class="keyword">let</span> val = <span class="string">''</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">  enumerable: <span class="literal">true</span>,</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    <span class="comment">// todo1... 在获取属性值前触发的操作</span></span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span>(value) &#123;</span><br><span class="line">    val = value;</span><br><span class="line">    <span class="comment">// todo2... 在设置属性值后触发的操作</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>通过以上的方法，可以实现当我们在操作data中的某一个属性值时，无论是设置还是获取，都能触发一部分代码。<br>这部分代码，就可以让我们实现数据变化的侦听了。</p></li><li><p>现在，我们有了对数据侦听的能力。接下来，我们就可以通过遍历vm.data，将所有的属性都通过以上的方式，<br>进行代理。至此，对象上任何一个属性都已经可以触发我们自己想要进行的操作代码了。</p></li><li><p>能够知道什么时候需要通知后，我们现在就需要收集信息的订阅者，收集，就涉及到保存和通知。首先，<br>保存功能因为需要能保存多个数据，所以可以使用数组来收集，为每一个key创建一个数组，这个是一个私有属性，<br>使用闭包的特性来创建一个作用域数组变量。如下：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>data 需要进行侦听的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>key 侦听的属性key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>val 保存当前属性的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">def</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 订阅者队列，当前的key对应的</span></span><br><span class="line">  <span class="keyword">const</span> dep = [];</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">      <span class="comment">// 在此添加一步操作，将订阅者添加进队列</span></span><br><span class="line">      <span class="keyword">if</span> (dep.indexOf(watcher)) dep.push(watcher);</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(value) &#123;</span><br><span class="line">      val = value;</span><br><span class="line">      <span class="comment">// 赋值后，再通知订阅者重新拉取数据。</span></span><br><span class="line">      dep.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item._update())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上的方法，将对象属性递归遍历处理一次，获得能够储存订阅者的数组的模型，数组从变化到通知,<br>都在这个模块中消化了，入口是当前实例需要侦听的数据模型，以及当前实例。出口，就是对变化的数据侦听了的订阅者。<br>vue的侦听原理大概就是这样的模型。get代理收集订阅，set代理通知订阅，达到同步刷新数据跟视图的目的   </p></li><li><p>当然，还漏了点东西。前面只是实现了对Object对象的属性侦听。但实际上，数据模型不仅仅只有对象，<br>还会有数组。数组操作一般都是通过各种方法去进行元素操作的。所以用对象的侦听方式去侦听数组，是无效的。<br>现在有两种数据操作模式。比如有个变量arr=[1]，给他赋值一个新数组，arr=[2],这种方式可以通过属性变化来监听，<br>但是，如果使用arr.push(2)，这种方式就侦听不到了。所以需要来特殊处理一下。</p></li><li><p>关于数组的处理方式，可以借用function.apply的属性方法，来操作。如下代码：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以push方法为例,先创建一个新对象，</span></span><br><span class="line"><span class="keyword">const</span> arrayMethods = &#123;&#125;;</span><br><span class="line"><span class="comment">// 对这个对象的push属性进行代理</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(arrayMethods, <span class="string">'push'</span>, &#123;</span><br><span class="line">  enumerable: <span class="literal">true</span>,</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">get</span>(...args) &#123;</span><br><span class="line">    <span class="comment">// todo... 此处可以进行我们需要的代理操作</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.push.apply(<span class="keyword">this</span>, args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 将数据中的数组原型代理成新对象</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(val)) val.prototype = arrayMethods</span><br></pre></td></tr></table></figure></li><li><p>通过以上的方法，就找到了对数组的方法进行侦听的办法。在vue源码中，就是通过这种方式，去代理数组的操作方法的。<br>实际上，需要代理的只是数组属性中对元素位置和数量操作的方法，那么列出来的话，只有七种符合要求：push, shift, unshift,<br>pop, sort, splice, ‘reverse’。正因为如此,vue才会有一个数组操作过程中，饱受诟病的问题。如果通过arr[0] = 2这种操作去赋值的话。<br>是不会触发数据渲染方法的，所以也不会有视图同步更新。vue在这方面，提供了一个Vue.prototype.$set方法，去设置数组的值，并且触发更新。</p></li><li><p>以上就是vue的数据侦听原理。当然，实际原理中的代码不会只有这么简单，比如，源码中的dep并不是一个数组，而是一个Dep类，<br>它有自己的调用方法，而且添加dep不会使用数组的查重方式，而是将收集订阅的方法放入了Watcher中，通过每一个Watcher有一个保存dep实例的id的map,<br>因为对象查重比数组要方便有效的多，能节约性能。这些小细节都是必须深入到源码中，才能理解得到其中的奥秘的。</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Watcher &#123;</span><br><span class="line">   <span class="comment">// 源码中，get方法里，调用dep.push(watcher),实际执行的是这段代码</span></span><br><span class="line">   <span class="comment">// this指向的Watcher实例</span></span><br><span class="line">  addDep (dep: Dep) &#123;</span><br><span class="line">      <span class="keyword">const</span> id = dep.id;</span><br><span class="line">     <span class="comment">// newDepIds是存储dep实例id的map。</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.newDepIds.has(id)) &#123;</span><br><span class="line">       <span class="keyword">this</span>.newDepIds.add(id);</span><br><span class="line">       <span class="keyword">this</span>.newDeps.push(dep);</span><br><span class="line">       <span class="keyword">if</span> (!<span class="keyword">this</span>.depIds.has(id)) &#123;</span><br><span class="line">         dep.addSub(<span class="keyword">this</span>)</span><br><span class="line">       &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>以上就是对vue源码中数据侦听源码(core/observer)的一个大致的分享。</strong></p><h4 id="2-patch"><a href="#2-patch" class="headerlink" title="2. patch"></a>2. patch</h4><p><strong>入口：vdom/patch.js</strong><br></p><ol><li><p>patch方法是在实例重新渲染页面dom的时候，将实例的vnode转换成对应的dom时调用的方法<strong>patch</strong>。作用是当数据侦听调用update方法时，<br>通过将新旧vnode的对比，尽可能减少实际dom的操作，尽量复用旧的dom元素组合成新的dom树，返回给实例去加载到html文档中。</p></li><li><p>为什么要有虚拟dom？因为在前端操作中，dom的操作其实是调用的浏览器给的api,dom属于宿主对象，在js原本的语言对象中，是不存在dom对象的，<br>所以js如果想操作dom,只能通过调用浏览器给的一些列dom操作api才能操作。正因如此，当我们操作dom时，性能远远不如我们执行的js基本对象的。<br>然而，实际业务场景中，dom的操作又经常时大量且重复的。这就导致了在不断的创建，销毁，更新dom中，浏览器会浪费很多不必要的性能。所以，<br>因为重复，所以我们可以尽量复用已经创建好的dom，减少销毁和重新构建的性能开支。这样就能提高一部分提高效率。</p></li><li><p>因为想要复用创建好的dom,所以我们免不了要去进行不同dom之间的对比，但是，去操作实际dom对比时，也会调用大量的浏览器api，这又会增加性能开支，<br>所以，在vue中，就有了虚拟dom，也就时vnode，通过使用vnode的方式，模拟dom中的node类型，将原本的dom对象，映射成js中基本对象类型构建的vdom，<br>这样，我们通过对比原生js对象，避免了对比时调用大量的浏览器api，又节约了一部分浏览器性能损失。</p></li><li><p>但是这样，还是不够，按我们原本的对比方法，对比dom树时，通过双重循环去调用，那么这样的时间复杂度，就跟节点数量多少有了很大的出入了，O(n^2)，<br>随着项目的增加，这样重复的对比也会又大量的性能损失，所以在vue中。又出现了diff算法对比。</p></li><li><p>diff算法：就是在对比过程中，通过一系列的优化操作，<strong>尽可能的通过更少的比较次数复用更多的dom节点</strong>。比如：</p><ol><li><p>tree diff: 因为在实际开发中，节点跨层级复用的几率很小，所以diff算法，在对比中，会跳过对新旧树节点中跨层级节点的比较</p></li><li><p>component diff: 因为在开发中，不仅仅有浏览器dom,也可能设计到组件的比对，这也是有优化项的。在对比中，如果新组件与就组件的类型相同，<br>则会复用组件下的子集dom,只更新当前组件的属性</p></li><li><p>element diff: 当节点对应的类型，为原生dom类型时。就会进行更细粒度化的比较。具体的比较规则为：<br><br><code>1. 从list两头往中间比较，比较成功，就将旧vdom的elm属性赋值给新vdom，新旧比较位置往中间挪动一位。当新旧前位置下标大于对应后位置下标时，退出对比。</code><br><br><code>2. 比较时，分四步顺序比较，新前-&gt;旧前，新后-&gt;旧后，新前-&gt;旧后，新后-&gt;旧前。新key in keysMap？再没有，就直接重新渲染当前新节点，并往前挪一位</code></p></li><li><p>正因为以上的比较方式，当子节点列表过长且节点类型过多时，如果不给节点配置key，那么复用节点比例会随着list的增加而大大减少。以至于又会出现大量重复的渲染。<br>导致性能的损失，所以vue文档中建议，当使用for循环时，尽可能的给list设置对应的key，因为vue会为当前自节点列表配置一个key的map对象。当四种基本对比方法失效时，<br>会获取当前的元素的key，去旧keyMap中查找相同key节点。map[key]的方式，时间复杂度为O1，所以能解决当节点过多时，复用率过低的问题。</p></li><li><p>以上就是diff算法，在vue源码中，解决因dom操作过多而导致渲染效率低问题的方法。</p></li><li><p>两个list比较的diff算法过程代码实现：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟的diff算法</span></span><br><span class="line"><span class="comment">// 声明新旧开始与结尾节点的下标和元素</span></span><br><span class="line"><span class="keyword">let</span> oldStartIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> newStartIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> oldEndIndex = oldList.length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> newEndIndex = newList.length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> oldStartNode = oldList[oldStartIndex];</span><br><span class="line"><span class="keyword">let</span> newStartNode = newList[newStartIndex];</span><br><span class="line"><span class="keyword">let</span> newEndNode = newList[newEndIndex];</span><br><span class="line"><span class="keyword">let</span> oldEndNode = oldList[oldEndIndex];</span><br><span class="line"><span class="keyword">let</span> keyMap; <span class="comment">// 旧key的map集合</span></span><br><span class="line"><span class="comment">// 新旧vnode对比方法</span></span><br><span class="line"><span class="keyword">const</span> someVnode = <span class="function">(<span class="params">oldVnode, newVnode</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 先对比key是否相同，如果key不同，直接放弃比较(key都为空时，条件也成立)</span></span><br><span class="line">    <span class="comment">// 再对比name是否相同，如果两者都相同，则返回对比成功。</span></span><br><span class="line">    <span class="keyword">return</span> newVnode.key === oldVnode.key &amp;&amp; newVnode.name === oldVnode.name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 模拟的diff算法</span></span><br><span class="line"><span class="keyword">while</span> (newStartIndex &lt;= newEndIndex &amp;&amp; oldStartIndex &lt;= oldEndIndex) &#123;</span><br><span class="line">    <span class="comment">// 对旧节点进行判空操作</span></span><br><span class="line">    <span class="keyword">if</span> (oldStartNode === <span class="keyword">void</span> <span class="number">0</span>) oldStartNode = oldList[++oldStartIndex];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldEndNode === <span class="keyword">void</span> <span class="number">0</span>) oldEndNode = oldList[--oldEndIndex];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (someVnode(oldStartNode, newStartNode)) &#123;<span class="comment">// 新前-&gt;旧前</span></span><br><span class="line">        newStartNode.value = oldStartNode.value;</span><br><span class="line">        newStartNode = newList[++newStartIndex];</span><br><span class="line">        oldStartNode = oldList[++oldStartIndex];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (someVnode(oldEndNode, newEndNode)) &#123;<span class="comment">// 新后-&gt;旧后</span></span><br><span class="line">        newEndNode.value = oldEndNode.value;</span><br><span class="line">        newEndNode = newList[--newEndIndex];</span><br><span class="line">        oldEndNode = oldList[--oldEndIndex];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (someVnode(oldEndNode, newStartNode)) &#123;<span class="comment">// 新前-&gt;旧后</span></span><br><span class="line">        newStartNode.value = oldEndNode.value;</span><br><span class="line">        newStartNode = newList[++newStartIndex];</span><br><span class="line">        oldEndNode = oldList[--oldEndIndex];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (someVnode(oldStartNode, newEndNode)) &#123;<span class="comment">// 新后-&gt;旧前</span></span><br><span class="line">        newEndNode.value = oldStartNode.value;</span><br><span class="line">        newEndNode = newList[--newEndIndex];</span><br><span class="line">        oldStartNode = oldList[--oldStartIndex];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 生成旧dom的keyMap</span></span><br><span class="line">        <span class="keyword">if</span> (!keyMap) &#123;</span><br><span class="line">          keyMap = &#123;&#125;;</span><br><span class="line">          oldList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.key) keyMap[item.key] = item.value;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果key相同，就认为是同一节点，复用</span></span><br><span class="line">        <span class="keyword">if</span> (keyMap[newStartNode.key] !== <span class="keyword">void</span> <span class="number">0</span>) newStartNode.value = keyMap[newStartNode.key];</span><br><span class="line">        newStartNode = newList[++newStartIndex];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>比较两个简单的list</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> newList = [</span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'div'</span>&#125;, <span class="comment">//下标0</span></span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'div'</span>&#125;, <span class="comment">//下标1</span></span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'h1'</span>&#125;,  <span class="comment">//下标2</span></span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'div'</span>&#125;, <span class="comment">//下标3</span></span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'h1'</span>&#125;,  <span class="comment">//下标4</span></span><br><span class="line"> ], oldList = [</span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'h1'</span>, <span class="attr">value</span>: <span class="number">3</span>&#125;,  <span class="comment">//下标0</span></span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'div'</span>, <span class="attr">value</span>: <span class="number">1</span>&#125;, <span class="comment">//下标1</span></span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'div'</span>, <span class="attr">value</span>: <span class="number">2</span>&#125;];<span class="comment">//下标2</span></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123;name: 'div', value: 2&#125;,</span></span><br><span class="line"><span class="comment">//   &#123;name: 'div', value: 1&#125;,</span></span><br><span class="line"><span class="comment">//   &#123;name: 'h1', value: 3&#125;,</span></span><br><span class="line"><span class="comment">//   &#123;name: 'div'&#125;,</span></span><br><span class="line"><span class="comment">//   &#123;name: 'h1'&#125;,</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure></li><li><p>比较多类型list</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 多类型list</span></span><br><span class="line"> <span class="keyword">let</span> newList = [</span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'div'</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'div'</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'h2'</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'div'</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'h1'</span>&#125;,</span><br><span class="line"> ], oldList = [</span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'h5'</span>, <span class="attr">value</span>: <span class="number">3</span>&#125;,  <span class="comment">//下标0</span></span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'h2'</span>, <span class="attr">value</span>: <span class="number">1</span>&#125;, <span class="comment">//下标1</span></span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'div'</span>, <span class="attr">value</span>: <span class="number">4</span>&#125;, <span class="comment">//下标1</span></span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'div'</span>, <span class="attr">value</span>: <span class="number">5</span>&#125;, <span class="comment">//下标1</span></span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'h1'</span>, <span class="attr">value</span>: <span class="number">6</span>&#125;, <span class="comment">//下标1</span></span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'div'</span>, <span class="attr">value</span>: <span class="number">7</span>&#125;, <span class="comment">//下标1</span></span><br><span class="line">     &#123;<span class="attr">name</span>: <span class="string">'h6'</span>, <span class="attr">value</span>: <span class="number">2</span>&#125;];<span class="comment">//下标2</span></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123;name: 'div'&#125;,</span></span><br><span class="line"><span class="comment">//   &#123;name: 'div'&#125;,</span></span><br><span class="line"><span class="comment">//   &#123;name: 'h2'&#125;,</span></span><br><span class="line"><span class="comment">//   &#123;name: 'div'&#125;,</span></span><br><span class="line"><span class="comment">//   &#123;name: 'h1'&#125;,</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure></li><li><p>比较多类型带key的list</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 带key的多类型list</span></span><br><span class="line"> <span class="keyword">let</span> newList = [</span><br><span class="line">   &#123;<span class="attr">name</span>: <span class="string">'div'</span>, <span class="attr">key</span>: <span class="string">'key1'</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">name</span>: <span class="string">'div'</span>, <span class="attr">key</span>: <span class="string">'key2'</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">name</span>: <span class="string">'h2'</span>, <span class="attr">key</span>: <span class="string">'key3'</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">name</span>: <span class="string">'div'</span>, <span class="attr">key</span>: <span class="string">'key4'</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">name</span>: <span class="string">'h1'</span>, <span class="attr">key</span>: <span class="string">'key5'</span>&#125;,</span><br><span class="line"> ];</span><br><span class="line"> <span class="keyword">let</span> oldList = [</span><br><span class="line">   &#123;<span class="attr">name</span>: <span class="string">'h5'</span>, <span class="attr">value</span>: <span class="number">3</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">name</span>: <span class="string">'h2'</span>, <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">key</span>: <span class="string">'key3'</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">name</span>: <span class="string">'div'</span>, <span class="attr">value</span>: <span class="number">4</span>, <span class="attr">key</span>: <span class="string">'key1'</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">name</span>: <span class="string">'div'</span>, <span class="attr">value</span>: <span class="number">5</span>, <span class="attr">key</span>: <span class="string">'key2'</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">name</span>: <span class="string">'h1'</span>, <span class="attr">value</span>: <span class="number">6</span>, <span class="attr">key</span>: <span class="string">'key5'</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">name</span>: <span class="string">'div'</span>, <span class="attr">value</span>: <span class="number">7</span>, <span class="attr">key</span>: <span class="string">'key4'</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">name</span>: <span class="string">'h6'</span>, <span class="attr">value</span>: <span class="number">2</span>&#125;];</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123;name: 'div', key: 'key1', value: 4&#125;,</span></span><br><span class="line"><span class="comment">//   &#123;name: 'div', key: 'key2', value: 5&#125;,</span></span><br><span class="line"><span class="comment">//   &#123;name: 'h2', key: 'key3', value: 1&#125;,</span></span><br><span class="line"><span class="comment">//   &#123;name: 'div', key: 'key4', value: 7&#125;,</span></span><br><span class="line"><span class="comment">//   &#123;name: 'h1', key: 'key5', value: 6&#125;,</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>具体的代码demo我放在了<strong>ylsTest/Patch/index.js</strong>文件中。当然，vue源码中还有很多注重细节的地方，<br>但是实现原理大致相同。在开发中，当我们使用v-if过多时，也可以尝试给每个节点添加唯一的key来优化渲染速度。       </p></li></ol><h4 id="3-compiler"><a href="#3-compiler" class="headerlink" title="3. compiler"></a>3. compiler</h4><p><strong>入口：compiler/index.js</strong> <br></p><ol><li><p>本模块在vue中的作用，是将vue语法写成的字符串，通过该模块的转换，最终输出一个render函数。每个实例都有一个render,<br>render的作用就是在调用实例的<code>_watcher.update()</code>方法时，生成新的vnode传入方法中，进行视图层的更新。<br>所以，本模块的最终的目的，就是生成vnode传给vm实例使用。</p></li><li><p>所以，在<code>new Vue(options)</code>时，如果配置项不传入render函数，那么，$mount方法就会调用本模块，将el传入的字符串，<br>或者el标签的内容innerHtml，当成参数template传入本模块，调用core/compiler/index的createCompiler方法，<br>将传入的字符串，先通过解析器parse转换成抽象语法树，在通过优化器optimize标记一些静态属性与根节点，然后通过代码生成器generate，<br>生成render字符串代码。</p></li><li><p>其中的核心代码为解析器，解析器的工作流程，跟浏览器解析html文档的流程相仿，先在parse作用域下，<br>创建一个stack执行栈，用来存放解析的tag节点。再创建start,end,common,chars四个方法，四个方法都创建在当前作用域下，<br>然后再通过参数方式传入parseHTML，在执行过程中，通过正则匹配的方式，对<tag/>,<tag><tag/>,&lt;– common –&gt;,chars等节点进行匹配，<br>通过 &lt; 符号区分，可以将匹配到的字段分成开始标签，结束标签，注释节点，文本节点，在匹配到时，分别调用对应的四个方法。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start：会将当前tag压入栈中。</span><br><span class="line">end：弹出栈中第一个与tag名称相同的元素，并且将其加入到当前栈顶元素的children属性中。</span><br><span class="line">通过栈的方式，可以保证当前栈中的上一个元素，必定是当前元素的父元素，保证了树图的构成</span><br></pre></td></tr></table></figure></li><li><p>具体的解析，在parseHTML中，是通过一个<code>while(html)</code>进行操作，有一个公共的切割方法advance方法，会根据当前匹配到的字符下标，<br>将该字符从html字符串中切割掉。然后根据匹配到的tag类型调用不同的方法，直到html被切割完，或者，执行完一次循环后，html字符串没有变化，<br>则停止循环。如果是后者停止，则会抛出模板错误，停止代码运行。</p></li><li><p>通过该种方式，将一串vue代码模板，解析成了AST抽象语法树。然后将再调用优化器optimize，将抽象语法树中，没有参数的文本节点，<br>以及没有特殊属性的tag节点，标记为静态属性，添加static属性，表示该节点不需要进行额外对比，可以复用。</p></li><li><p>最后，通过生成器generate处理后，生成了字符串代码。比如:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串代码: _c(&#39;div&#39;,&#123;attrs:&#123;&quot;id&quot;:&quot;app&quot;&#125;&#125;,[_v(&quot;\n  &quot;+_s(aaa)+&quot;\n&quot;)])</span><br><span class="line">可以通过render &#x3D; new Function(with(this)&#123;return _c(&#39;div&#39;,&#123;attrs:&#123;&quot;id&quot;:&quot;app&quot;&#125;&#125;,[_v(&quot;\n  &quot;+_s(aaa)+&quot;\n&quot;)])&#125;)</span><br></pre></td></tr></table></figure></li><li><p>将该段解析的代码，解析成可执行的代码，这其中的关键，在于with(this)，通过这种方式，可以将this的属性，直接不用加前缀的调用。<br>这样，就可以直接拉区vm实例上对应的属性，渲染成静态的新的vnode，然后再传给_update当作参数使用。</p></li><li><p>模板编译一般只会调用一次，实例化时调用。如果是使用的vue-cli开发工具开发，那么.vue文件都会被预编译成render函数，打包成纯js代码，<br>可以减少运行时渲染时间。也支持引入vue.runtime.js代码，这个形态的代码，去除了compiler这个模块的内容，可以使得js的包减少大约1/3，<br>使得前端拉取代码时减少不必要的加载时间，更快的渲染出视图。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vue, 源码 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
